## Problems to solve in this project;

```sql
-- Retrieve the total number of orders placed.

SELECT COUNT(order_id) AS total_orders FROM orders;
```

```sql
-- Calculate the total revenue generated from pizza sales.

SELECT 
    ROUND(SUM(pizzas.price * order_details.quantity),
            2) AS total_sales
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id;

-- Identify the highest-priced pizza.

SELECT 
    pizza_types.name, pizzas.price
FROM
    pizzas
        JOIN
    pizza_types ON pizzas.pizza_type_id = pizza_types.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1;
```

```sql
-- Identify the most common pizza size ordered.

SELECT 
    p.size, COUNT(*) AS order_count
FROM
    pizzas p
        JOIN
    order_details od ON p.pizza_id = od.pizza_id
GROUP BY p.size
ORDER BY order_count DESC
LIMIT 1;
```
```sql
-- List the top 5 most ordered pizza types along with their quantitaies.

SELECT 
    pizza_types.name, SUM(order_details.quantity) AS quantity
FROM
    pizza_types
        JOIN
    pizzas ON pizza_types.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizza_types.name
ORDER BY quantity DESC
LIMIT 5;
```

```sql
-- Join the necessary tables to find the total quantity of each pizza category ordered.

SELECT 
    pt.category, SUM(od.quantity) AS total_quantity
FROM
    pizzas p
        JOIN
    order_details od ON p.pizza_id = od.pizza_id
        JOIN
    pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.category
ORDER BY total_quantity DESC;
```

```sql
-- Determine the distribution of orders by hour of the day. 

SELECT 
    EXTRACT(HOUR FROM order_time) AS hour_of_day,
    COUNT(*) AS total_orders
FROM
    orders
GROUP BY hour_of_day
ORDER BY hour_of_day;
```

```sql
-- Join relevant tables to find the category-wise distribution of pizzas.

SELECT 
    category, COUNT(name) AS total_pizzas
FROM
    pizza_types
GROUP BY category;
```

```sql
-- Group the orders by date and calculate the average number of pizzas ordered per day.

SELECT 
    ROUND(AVG(daily_total), 0) AS avg_pizzas_per_day
FROM
    (SELECT 
        o.order_date, SUM(od.quantity) AS daily_total
    FROM
        orders o
    JOIN order_details od ON o.order_id = od.order_id
    GROUP BY o.order_date) AS daily_totals;
```

```sql
-- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    pt.name, SUM(od.quantity * p.price) AS total_revenue
FROM
    pizzas p
        JOIN
    order_details od ON p.pizza_id = od.pizza_id
        JOIN
    pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
GROUP BY pt.name
ORDER BY total_revenue DESC
LIMIT 3;
```

```sql
-- Calculate the percentage contribution of each pizza type to total revenue.

WITH TotalRevenue AS (
    SELECT SUM(od.quantity * p.price) AS total_revenue
    FROM pizzas p
    JOIN order_details od ON p.pizza_id = od.pizza_id
),
CategoryRevenue AS (
    SELECT pt.category, SUM(od.quantity * p.price) AS category_revenue
    FROM pizzas p
    JOIN order_details od ON p.pizza_id = od.pizza_id
    JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
    GROUP BY pt.category
)
SELECT cr.category,
       ROUND((cr.category_revenue / (SELECT total_revenue FROM TotalRevenue) * 100), 2) AS percentage_contribution
FROM CategoryRevenue cr
ORDER BY percentage_contribution DESC;
```

```sql
-- Analyze the cumulative revenue generated over time.


WITH DailyRevenue AS (
    SELECT o.order_date,
           SUM(od.quantity * p.price) AS daily_revenue
    FROM orders o
    JOIN order_details od ON o.order_id = od.order_id
    JOIN pizzas p ON od.pizza_id = p.pizza_id
    GROUP BY o.order_date
),
CumulativeRevenue AS (
    SELECT order_date,
           daily_revenue,
           SUM(daily_revenue) OVER (ORDER BY order_date) AS cumulative_revenue
    FROM DailyRevenue
)
SELECT order_date,
       round((cumulative_revenue),2)
FROM CumulativeRevenue
ORDER BY order_date;
```

```sql
-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

WITH PizzaRevenue AS (
    SELECT pt.category,
           pt.name,
           SUM(od.quantity * p.price) AS pizza_revenue
    FROM pizzas p
    JOIN order_details od ON p.pizza_id = od.pizza_id
    JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
    GROUP BY pt.category, pt.name
),
RankedPizzaRevenue AS (
    SELECT category,
           name,
           pizza_revenue,
           ROW_NUMBER() OVER (PARTITION BY category ORDER BY pizza_revenue DESC) AS rnk
    FROM PizzaRevenue
)
SELECT name,
       pizza_revenue
FROM RankedPizzaRevenue
WHERE rnk <= 3
ORDER BY MIN(category) OVER (ORDER BY rnk), pizza_revenue DESC;
```

```sql
WITH PizzaRevenue AS (
    SELECT pt.category,
           pt.name,
           SUM(od.quantity * p.price) AS pizza_revenue
    FROM pizzas p
    JOIN order_details od ON p.pizza_id = od.pizza_id
    JOIN pizza_types pt ON p.pizza_type_id = pt.pizza_type_id
    GROUP BY pt.category, pt.name
),
RankedPizzaRevenue AS (
    SELECT category,
           name,
           pizza_revenue,
           ROW_NUMBER() OVER (PARTITION BY category ORDER BY pizza_revenue DESC) AS rnk
    FROM PizzaRevenue
)
SELECT category,
       name,
       pizza_revenue
FROM RankedPizzaRevenue
WHERE rnk <= 3
ORDER BY category, pizza_revenue DESC;
```
























